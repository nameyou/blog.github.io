const l=JSON.parse('{"key":"v-25f08caa","path":"/javadocs/javase/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html","title":"Java基础知识","lang":"zh-CN","frontmatter":{"title":"Java基础知识","icon":"creative","description":"基础概念与常识 Java 语言有哪些特点? 1. 简单易学； 2. 面向对象（封装，继承，多态）； 3. 平台无关性（ Java 虚拟机实现平台无关性）； 4. 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 5. 可靠性； 6. 安全性； 7. 支持网络编...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/javadocs/javase/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"博学谷大前端"}],["meta",{"property":"og:title","content":"Java基础知识"}],["meta",{"property":"og:description","content":"基础概念与常识 Java 语言有哪些特点? 1. 简单易学； 2. 面向对象（封装，继承，多态）； 3. 平台无关性（ Java 虚拟机实现平台无关性）； 4. 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 5. 可靠性； 6. 安全性； 7. 支持网络编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-13T06:18:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-13T06:18:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-13T06:18:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"基础概念与常识","slug":"基础概念与常识","link":"#基础概念与常识","children":[{"level":3,"title":"Java 语言有哪些特点?","slug":"java-语言有哪些特点","link":"#java-语言有哪些特点","children":[]},{"level":3,"title":"JVM vs JDK vs JRE","slug":"jvm-vs-jdk-vs-jre","link":"#jvm-vs-jdk-vs-jre","children":[]},{"level":3,"title":"为什么说 Java 语言“编译与解释并存”？","slug":"为什么说-java-语言-编译与解释并存","link":"#为什么说-java-语言-编译与解释并存","children":[]},{"level":3,"title":"Oracle JDK 和 OpenJDK 的对比","slug":"oracle-jdk-和-openjdk-的对比","link":"#oracle-jdk-和-openjdk-的对比","children":[]},{"level":3,"title":"Java 和 C++的区别?","slug":"java-和-c-的区别","link":"#java-和-c-的区别","children":[]},{"level":3,"title":"import java 和 javax 有什么区别？","slug":"import-java-和-javax-有什么区别","link":"#import-java-和-javax-有什么区别","children":[]}]},{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[{"level":3,"title":"字符型常量和字符串常量的区别?","slug":"字符型常量和字符串常量的区别","link":"#字符型常量和字符串常量的区别","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"标识符和关键字的区别是什么？","slug":"标识符和关键字的区别是什么","link":"#标识符和关键字的区别是什么","children":[]},{"level":3,"title":"Java 中有哪些常见的关键字？","slug":"java-中有哪些常见的关键字","link":"#java-中有哪些常见的关键字","children":[]},{"level":3,"title":"自增自减运算符","slug":"自增自减运算符","link":"#自增自减运算符","children":[]},{"level":3,"title":"continue、break、和 return 的区别是什么？","slug":"continue、break、和-return-的区别是什么","link":"#continue、break、和-return-的区别是什么","children":[]},{"level":3,"title":"Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？","slug":"java-泛型了解么-什么是类型擦除-介绍一下常用的通配符","link":"#java-泛型了解么-什么是类型擦除-介绍一下常用的通配符","children":[]},{"level":3,"title":"==和 equals 的区别","slug":"和-equals-的区别","link":"#和-equals-的区别","children":[]},{"level":3,"title":"hashCode()与 equals()","slug":"hashcode-与-equals","link":"#hashcode-与-equals","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[{"level":3,"title":"Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？","slug":"java-中的几种基本数据类型是什么-对应的包装类型是什么-各自占用多少字节呢","link":"#java-中的几种基本数据类型是什么-对应的包装类型是什么-各自占用多少字节呢","children":[]},{"level":3,"title":"自动装箱与拆箱","slug":"自动装箱与拆箱","link":"#自动装箱与拆箱","children":[]},{"level":3,"title":"8 种基本类型的包装类和常量池","slug":"_8-种基本类型的包装类和常量池","link":"#_8-种基本类型的包装类和常量池","children":[]}]},{"level":2,"title":"方法（函数）","slug":"方法-函数","link":"#方法-函数","children":[{"level":3,"title":"什么是方法的返回值?","slug":"什么是方法的返回值","link":"#什么是方法的返回值","children":[]},{"level":3,"title":"方法有哪几种类型？","slug":"方法有哪几种类型","link":"#方法有哪几种类型","children":[]},{"level":3,"title":"在一个静态方法内调用一个非静态成员为什么是非法的?","slug":"在一个静态方法内调用一个非静态成员为什么是非法的","link":"#在一个静态方法内调用一个非静态成员为什么是非法的","children":[]},{"level":3,"title":"静态方法和实例方法有何不同？","slug":"静态方法和实例方法有何不同","link":"#静态方法和实例方法有何不同","children":[]},{"level":3,"title":"为什么 Java 中只有值传递？","slug":"为什么-java-中只有值传递","link":"#为什么-java-中只有值传递","children":[]},{"level":3,"title":"重载和重写的区别","slug":"重载和重写的区别","link":"#重载和重写的区别","children":[]},{"level":3,"title":"深拷贝 vs 浅拷贝","slug":"深拷贝-vs-浅拷贝","link":"#深拷贝-vs-浅拷贝","children":[]}]},{"level":2,"title":"Java 面向对象","slug":"java-面向对象","link":"#java-面向对象","children":[{"level":3,"title":"面向对象和面向过程的区别","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":3,"title":"成员变量与局部变量的区别有哪些？","slug":"成员变量与局部变量的区别有哪些","link":"#成员变量与局部变量的区别有哪些","children":[]},{"level":3,"title":"创建一个对象用什么运算符?对象实体与对象引用有何不同?","slug":"创建一个对象用什么运算符-对象实体与对象引用有何不同","link":"#创建一个对象用什么运算符-对象实体与对象引用有何不同","children":[]},{"level":3,"title":"对象的相等与指向他们的引用相等,两者有什么不同?","slug":"对象的相等与指向他们的引用相等-两者有什么不同","link":"#对象的相等与指向他们的引用相等-两者有什么不同","children":[]},{"level":3,"title":"一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?","slug":"一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么","link":"#一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么","children":[]},{"level":3,"title":"构造方法有哪些特点？是否可被 override?","slug":"构造方法有哪些特点-是否可被-override","link":"#构造方法有哪些特点-是否可被-override","children":[]},{"level":3,"title":"面向对象三大特征","slug":"面向对象三大特征","link":"#面向对象三大特征","children":[]},{"level":3,"title":"String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?","slug":"string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","link":"#string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的","children":[]},{"level":3,"title":"Object 类的常见方法总结","slug":"object-类的常见方法总结","link":"#object-类的常见方法总结","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"何为反射？","slug":"何为反射","link":"#何为反射","children":[]},{"level":3,"title":"反射机制优缺点","slug":"反射机制优缺点","link":"#反射机制优缺点","children":[]},{"level":3,"title":"反射的应用场景","slug":"反射的应用场景","link":"#反射的应用场景","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Java 异常类层次结构图","slug":"java-异常类层次结构图","link":"#java-异常类层次结构图","children":[]},{"level":3,"title":"Throwable 类常用方法","slug":"throwable-类常用方法","link":"#throwable-类常用方法","children":[]},{"level":3,"title":"try-catch-finally","slug":"try-catch-finally","link":"#try-catch-finally","children":[]},{"level":3,"title":"使用 try-with-resources 来代替try-catch-finally","slug":"使用-try-with-resources-来代替try-catch-finally","link":"#使用-try-with-resources-来代替try-catch-finally","children":[]}]},{"level":2,"title":"I/O 流","slug":"i-o-流","link":"#i-o-流","children":[{"level":3,"title":"什么是序列化?什么是反序列化?","slug":"什么是序列化-什么是反序列化","link":"#什么是序列化-什么是反序列化","children":[]},{"level":3,"title":"Java 序列化中如果有些字段不想进行序列化，怎么办？","slug":"java-序列化中如果有些字段不想进行序列化-怎么办","link":"#java-序列化中如果有些字段不想进行序列化-怎么办","children":[]},{"level":3,"title":"获取用键盘输入常用的两种方法","slug":"获取用键盘输入常用的两种方法","link":"#获取用键盘输入常用的两种方法","children":[]},{"level":3,"title":"Java 中 IO 流分为几种?","slug":"java-中-io-流分为几种","link":"#java-中-io-流分为几种","children":[]},{"level":3,"title":"既然有了字节流,为什么还要有字符流?","slug":"既然有了字节流-为什么还要有字符流","link":"#既然有了字节流-为什么还要有字符流","children":[]}]},{"level":2,"title":"4. 参考","slug":"_4-参考","link":"#_4-参考","children":[]}],"git":{"createdTime":1678688309000,"updatedTime":1678688309000,"contributors":[{"name":"“gaofee”","email":"“79527743@qq.com”","commits":1}]},"readingTime":{"minutes":53.09,"words":15928},"filePathRelative":"javadocs/javase/Java基础知识.md","localizedDate":"2023年3月13日","autoDesc":true}');export{l as data};
